{
  "chainOfResponsibility": "یک روش برنامه‌نویسی است که در آن درخواست‌ها را از یک شیء به شیء دیگر منتقل می‌کند تا درخواستها را بررسی و پردازش کند.",
  "command": "یک روش برنامه نویسی است که یک عملکرد را در یک شیء مجزا بسته‌بندی کرده و به عنوان یک شیء دیگر برای اجرا فراخوانی می‌کند.",
  "interpreter": " یک روش برنامه نویسی است که با استفاده از یک گرامر تعریف شده، یک زبان را تفسیر می‌کند و عملکردهای مربوطه را اجرا می‌کند.",
  "iterator": "یک رابط را تعریف می‌کند که مجموعه‌ای از اشیاء را پیمایش کرده و به عناصر آن دسترسی فراهم می‌کند بدون این که جزئیات پیمایش را فاش کند.",
  "mediator": "یک رابط میانجی بین اشیاء را تعریف می‌کند که با کاهش وابستگی‌ها و ارتباطات مستقیم بین اشیاء، کنترل برقراری ارتباط و تعامل بین آنها را فراهم می‌کند.",
  "memento": "امکان ذخیره و بازیابی حالت یک شیء را فراهم می‌کند بدون این که از جزئیات پیاده‌سازی آن شیء آگاهی داشته باشد.",
  "observer": "مکانیزمی را برای ارتباط وابستگی بین اشیاء ارائه می‌دهد به طوری که وقتی حالت یک شیء تغییر می‌کند، سایر اشیاء که به آن وابسته هستند مطلع می‌شوند و به‌روزرسانی می‌شوند.",
  "state": "یک روش برنامه‌نویسی است که با تغییر رفتار یک شیء بر اساس تغییر وضعیت آن شیء، به وضعیت‌های مختلف مجزا پاسخ می‌دهد.",
  "strategy": "یک رابط را تعریف می‌کند که یک عملکرد خاص را پیاده‌سازی می‌کند. این الگو به اشیاء اجازه می‌دهد تا در زمان اجرا روش خود را تغییر دهند.",
  "templateMethod": "یک الگوی طراحی است که روش‌های پایه را در یک کلاس پایه تعریف می‌کند و اجازه می‌دهد کلاس‌های مشتق شده بخش‌هایی از این روش‌ها را بازنویسی کنند بدون این که ساختار کلی روش تغییر کند.",
  "visitor": "یک رابط را تعریف می‌کند که عملیات‌های مختلف را بر روی شیءها انجام می‌دهد. این الگو امکان اضافه کردن عملیات جدید بدون تغییر در کلاس‌های موجود را فراهم می‌کند."
}